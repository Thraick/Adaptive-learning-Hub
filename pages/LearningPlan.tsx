
import React, { useState, useEffect } from 'react';
import { ClipboardCheck, RefreshCw, Lightbulb, SpellCheck, MessageSquare } from 'lucide-react';
import { useData } from '../contexts/DataContext';
import { generateLearningPlan } from '../services/geminiService';
import Loader from '../components/Loader';
import { useNotification } from '../contexts/NotificationContext';
import { LearningRecommendation } from '../types';

const iconMap: Record<LearningRecommendation['type'], React.ElementType> = {
    quiz: Lightbulb,
    spelling: SpellCheck,
    chat_topic: MessageSquare
};

const colorMap: Record<LearningRecommendation['type'], string> = {
    quiz: 'yellow',
    spelling: 'green',
    chat_topic: 'blue'
};

const LearningPlan: React.FC = () => {
    const { userData, setUserData, apiKey } = useData();
    const { showNotification } = useNotification();
    const [isLoading, setIsLoading] = useState(false);

    const fetchPlan = async () => {
        if (!apiKey) {
            showNotification("API Key not set.", "error");
            return;
        }
        setIsLoading(true);
        try {
            const newPlan = await generateLearningPlan(apiKey, userData);
            setUserData(prev => ({...prev, learningPlan: newPlan }));
        } catch (error) {
            console.error(error);
            showNotification("Failed to generate a new learning plan.", "error");
        } finally {
            setIsLoading(false);
        }
    };
    
    useEffect(() => {
        if (userData.learningPlan.length === 0) {
            fetchPlan();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [apiKey]);
    
    const toggleTaskCompletion = (taskId: string) => {
        setUserData(prev => ({
            ...prev,
            learningPlan: prev.learningPlan.map(task => 
                task.id === taskId ? { ...task, completed: !task.completed } : task
            )
        }));
    };

    return (
        <div className="max-w-4xl mx-auto space-y-8">
            <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
                 <h1 className="text-3xl font-bold text-white text-center sm:text-left">Your AI Learning Plan</h1>
                 <button onClick={fetchPlan} disabled={isLoading} className="flex items-center bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-wait">
                    <RefreshCw className={`mr-2 h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
                    Generate New Plan
                 </button>
            </div>
            <p className="text-gray-400">Here are personalized tasks generated by your AI coach to help you improve your skills.</p>
            
            <div className="bg-gray-800 p-6 rounded-xl shadow-lg">
                {isLoading && <Loader text="Generating your personalized plan..." />}
                {!isLoading && userData.learningPlan.length > 0 && (
                    <div className="space-y-4">
                        {userData.learningPlan.map(task => {
                            const Icon = iconMap[task.type];
                            const color = colorMap[task.type];
                            return (
                                <div key={task.id} className={`p-4 rounded-lg flex items-start gap-4 border-l-4 border-${color}-500 bg-gray-900/50 transition-all ${task.completed ? 'opacity-60' : ''}`}>
                                    <div className="flex-shrink-0">
                                        <Icon className={`h-6 w-6 text-${color}-400 mt-1`} />
                                    </div>
                                    <div className="flex-grow">
                                        <h3 className={`font-bold text-lg text-white ${task.completed ? 'line-through' : ''}`}>{task.title}</h3>
                                        <p className="text-gray-400">{task.description}</p>
                                    </div>
                                    <div className="flex-shrink-0">
                                        <button onClick={() => toggleTaskCompletion(task.id)} className="p-2 text-gray-500 hover:text-white">
                                            <ClipboardCheck className={`h-6 w-6 ${task.completed ? `text-green-500` : ''}`} />
                                        </button>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}
                 {!isLoading && userData.learningPlan.length === 0 && (
                    <p className="text-gray-400 text-center py-10">No learning plan available. Try generating one!</p>
                 )}
            </div>
        </div>
    );
};

export default LearningPlan;
